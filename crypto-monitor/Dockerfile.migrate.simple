# Simple migration Dockerfile using pre-built sqlx binary
FROM alpine:3.19

# Install dependencies
RUN apk add --no-cache \
    ca-certificates \
    curl \
    bash \
    postgresql-client

# Download pre-built sqlx-cli binary (avoiding compilation)
RUN curl -L https://github.com/launchbadge/sqlx/releases/download/v0.7.4/sqlx-cli-v0.7.4-x86_64-unknown-linux-musl.tar.gz | tar xz -C /usr/local/bin

# Alternative: Use a different migration tool
# RUN curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xz -C /usr/local/bin

WORKDIR /migrations

# Copy entrypoint script
COPY <<'EOF' /entrypoint.sh
#!/bin/bash
set -e

echo "Waiting for database to be ready..."
until pg_isready -h ${DB_HOST:-postgres} -p ${DB_PORT:-5432} -U ${DB_USER:-crypto_monitor}; do
  echo "Database is unavailable - sleeping"
  sleep 2
done

echo "Database is ready!"

# Run migrations using sqlx
if [ -f /usr/local/bin/sqlx ]; then
    echo "Running migrations with sqlx..."
    sqlx migrate run
else
    echo "Running migrations with psql..."
    for file in /migrations/*.sql; do
        echo "Applying migration: $file"
        psql $DATABASE_URL -f "$file"
    done
fi

echo "Migrations completed!"
EOF

RUN chmod +x /entrypoint.sh

ENTRYPOINT ["/entrypoint.sh"]